<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classlittlebot__base_1_1LittlebotCommunication" kind="class" language="C++" prot="public">
    <compoundname>littlebot_base::LittlebotCommunication</compoundname>
    <basecompoundref refid="classlittlebot__base_1_1LittlebotCommunicationInterface" prot="public" virt="non-virtual">littlebot_base::LittlebotCommunicationInterface</basecompoundref>
    <includes refid="littlebot__communication_8hpp" local="no">littlebot_communication.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlittlebot__base_1_1LittlebotCommunication_1aa150b299a62035cb3614c6739997381f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; littlebot_base::LittlebotCommunication::command_velocities_</definition>
        <argsstring></argsstring>
        <name>command_velocities_</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::command_velocities_</qualifiedname>
        <briefdescription>
<para>Command velocities for the hardware. </para>
        </briefdescription>
        <detaileddescription>
<para>This vector stores the command velocities that are sent to the hardware. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="77" column="15" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlittlebot__base_1_1LittlebotCommunication_1a6b8b6528931fdc81cdd672627561e3e2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; littlebot_base::LittlebotCommunication::status_positions_</definition>
        <argsstring></argsstring>
        <name>status_positions_</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::status_positions_</qualifiedname>
        <briefdescription>
<para>Status positions from the hardware. </para>
        </briefdescription>
        <detaileddescription>
<para>This vector stores the status positions received from the hardware. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="84" column="15" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlittlebot__base_1_1LittlebotCommunication_1a7fa96c5b27456f3ab4393e8dc2094f08" prot="private" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; littlebot_base::LittlebotCommunication::status_velocities_</definition>
        <argsstring></argsstring>
        <name>status_velocities_</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::status_velocities_</qualifiedname>
        <briefdescription>
<para>Status velocities from the hardware. </para>
        </briefdescription>
        <detaileddescription>
<para>This vector stores the status velocities received from the hardware. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="91" column="15" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlittlebot__base_1_1LittlebotCommunication_1ad82883728df6049b6365f70a2a1303a7" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; serial::Serial &gt;</type>
        <definition>std::shared_ptr&lt;serial::Serial&gt; littlebot_base::LittlebotCommunication::serial_</definition>
        <argsstring></argsstring>
        <name>serial_</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::serial_</qualifiedname>
        <briefdescription>
<para>Smart pointer to serial port object. </para>
        </briefdescription>
        <detaileddescription>
<para>This object is used to communicate with the hardware. To more information about the serial library used, please visit: <ulink url="https://github.com/NestorDP/libserial">https://github.com/NestorDP/libserial</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="99" column="19" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classlittlebot__base_1_1LittlebotCommunication_1a847357cc0bd78430e7b14d302d5da5f1" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char littlebot_base::LittlebotCommunication::kStartByte</definition>
        <argsstring></argsstring>
        <name>kStartByte</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::kStartByte</qualifiedname>
        <initializer>{0x3C}</initializer>
        <briefdescription>
<para>Caracter to start the message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="104" column="25" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="variable" id="classlittlebot__base_1_1LittlebotCommunication_1a2fcb9e85b9122477b8d0463b503373a2" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char littlebot_base::LittlebotCommunication::kEndByte</definition>
        <argsstring></argsstring>
        <name>kEndByte</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::kEndByte</qualifiedname>
        <initializer>{0x3E}</initializer>
        <briefdescription>
<para>Caracter to end the message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="109" column="25" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" bodystart="109" bodyend="109"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classlittlebot__base_1_1LittlebotCommunication_1a751286041d3aee0a4136ee5df7a4f013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>littlebot_base::LittlebotCommunication::LittlebotCommunication</definition>
        <argsstring>(const std::string serial_port)</argsstring>
        <name>LittlebotCommunication</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::LittlebotCommunication</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>serial_port</declname>
        </param>
        <briefdescription>
<para>Constructor for the <ref refid="classlittlebot__base_1_1LittlebotCommunication" kindref="compound">LittlebotCommunication</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="21" column="3" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/src/littlebot_communication.cpp" bodystart="10" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classlittlebot__base_1_1LittlebotCommunication_1a57d7d97e059e07a6bc38304ed9d542cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>littlebot_base::LittlebotCommunication::~LittlebotCommunication</definition>
        <argsstring>()</argsstring>
        <name>~LittlebotCommunication</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::~LittlebotCommunication</qualifiedname>
        <briefdescription>
<para>Deconstructor for the <ref refid="classlittlebot__base_1_1LittlebotCommunication" kindref="compound">LittlebotCommunication</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="26" column="3" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/src/littlebot_communication.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classlittlebot__base_1_1LittlebotCommunication_1a0b95fdaaeb60532058248a7afc38fd7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void littlebot_base::LittlebotCommunication::setCommandVelocities</definition>
        <argsstring>(std::vector&lt; float &gt; velocities) override</argsstring>
        <name>setCommandVelocities</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::setCommandVelocities</qualifiedname>
        <reimplements refid="classlittlebot__base_1_1LittlebotCommunicationInterface_1ada866930b91e48d3a5cfc42083aebd51">setCommandVelocities</reimplements>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>velocities</declname>
        </param>
        <briefdescription>
<para>Set the command velocities. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="31" column="8" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/src/littlebot_communication.cpp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classlittlebot__base_1_1LittlebotCommunication_1aeee2bc5ba06e5b3451fd2cd387005c93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; littlebot_base::LittlebotCommunication::getStatusVelocities</definition>
        <argsstring>() const override</argsstring>
        <name>getStatusVelocities</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::getStatusVelocities</qualifiedname>
        <reimplements refid="classlittlebot__base_1_1LittlebotCommunicationInterface_1a68c3dace2d73f37ca53e2777f4a3c5d1">getStatusVelocities</reimplements>
        <briefdescription>
<para>Get the status velocities. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="36" column="15" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/src/littlebot_communication.cpp" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classlittlebot__base_1_1LittlebotCommunication_1a49eb9a06191a56e6127d385154978d1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; littlebot_base::LittlebotCommunication::getStatusPositionsStatus</definition>
        <argsstring>() const override</argsstring>
        <name>getStatusPositionsStatus</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::getStatusPositionsStatus</qualifiedname>
        <reimplements refid="classlittlebot__base_1_1LittlebotCommunicationInterface_1ab8c914e44eb2f5d819c01158b4a6e1c7">getStatusPositionsStatus</reimplements>
        <briefdescription>
<para>Get the status positions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="41" column="15" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/src/littlebot_communication.cpp" bodystart="34" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classlittlebot__base_1_1LittlebotCommunication_1adc39824e659f6f81d10856f281c28d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool littlebot_base::LittlebotCommunication::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::start</qualifiedname>
        <briefdescription>
<para>Start threads. </para>
        </briefdescription>
        <detaileddescription>
<para>This function starts the threads that read and write data to the hardware. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="48" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classlittlebot__base_1_1LittlebotCommunication_1acbc286f66fc016bd482fccf918c236a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool littlebot_base::LittlebotCommunication::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::stop</qualifiedname>
        <briefdescription>
<para>Stop thread that read data from serial port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function stops the threads that read and write data to the hardware. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="55" column="8"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classlittlebot__base_1_1LittlebotCommunication_1aed815176514a667f48a30c734a6a9076" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool littlebot_base::LittlebotCommunication::receive</definition>
        <argsstring>() override</argsstring>
        <name>receive</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::receive</qualifiedname>
        <reimplements refid="classlittlebot__base_1_1LittlebotCommunicationInterface_1a5415c804280b8a13d620cd9464ed0cd8">receive</reimplements>
        <briefdescription>
<para>Receive data from the hardware. </para>
        </briefdescription>
        <detaileddescription>
<para>This function receives the status positions and velocities from the hardware. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="63" column="8" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/src/littlebot_communication.cpp" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classlittlebot__base_1_1LittlebotCommunication_1ae9e18e2a81249b54e79e4b404fbc1f32" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool littlebot_base::LittlebotCommunication::send</definition>
        <argsstring>() override</argsstring>
        <name>send</name>
        <qualifiedname>littlebot_base::LittlebotCommunication::send</qualifiedname>
        <reimplements refid="classlittlebot__base_1_1LittlebotCommunicationInterface_1afeb87d44381014633850fafd1853273f">send</reimplements>
        <briefdescription>
<para>Send data to the hardware. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sends the command velocities to the hardware. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="70" column="8" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/src/littlebot_communication.cpp" bodystart="46" bodyend="50"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>littlebot_base::LittlebotCommunication</label>
        <link refid="classlittlebot__base_1_1LittlebotCommunication"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>littlebot_base::LittlebotCommunicationInterface</label>
        <link refid="classlittlebot__base_1_1LittlebotCommunicationInterface"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>littlebot_base::LittlebotCommunication</label>
        <link refid="classlittlebot__base_1_1LittlebotCommunication"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>littlebot_base::LittlebotCommunicationInterface</label>
        <link refid="classlittlebot__base_1_1LittlebotCommunicationInterface"/>
      </node>
    </collaborationgraph>
    <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" line="15" column="1" bodyfile="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/include/littlebot_base/littlebot_communication.hpp" bodystart="16" bodyend="112"/>
    <listofallmembers>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1aa150b299a62035cb3614c6739997381f" prot="private" virt="non-virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>command_velocities_</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1a49eb9a06191a56e6127d385154978d1b" prot="public" virt="virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>getStatusPositionsStatus</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1aeee2bc5ba06e5b3451fd2cd387005c93" prot="public" virt="virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>getStatusVelocities</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1a2fcb9e85b9122477b8d0463b503373a2" prot="private" virt="non-virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>kEndByte</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1a847357cc0bd78430e7b14d302d5da5f1" prot="private" virt="non-virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>kStartByte</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1a751286041d3aee0a4136ee5df7a4f013" prot="public" virt="non-virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>LittlebotCommunication</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunicationInterface_1a6d3de289ac76dc99e2b713cbc6d1e8a2" prot="protected" virt="non-virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>LittlebotCommunicationInterface</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1aed815176514a667f48a30c734a6a9076" prot="private" virt="virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>receive</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1ae9e18e2a81249b54e79e4b404fbc1f32" prot="private" virt="virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>send</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1ad82883728df6049b6365f70a2a1303a7" prot="private" virt="non-virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>serial_</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1a0b95fdaaeb60532058248a7afc38fd7e" prot="public" virt="virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>setCommandVelocities</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1adc39824e659f6f81d10856f281c28d27" prot="public" virt="non-virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>start</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1a6b8b6528931fdc81cdd672627561e3e2" prot="private" virt="non-virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>status_positions_</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1a7fa96c5b27456f3ab4393e8dc2094f08" prot="private" virt="non-virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>status_velocities_</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1acbc286f66fc016bd482fccf918c236a2" prot="public" virt="non-virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>stop</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunication_1a57d7d97e059e07a6bc38304ed9d542cc" prot="public" virt="non-virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>~LittlebotCommunication</name></member>
      <member refid="classlittlebot__base_1_1LittlebotCommunicationInterface_1a261ceff58de02d4d8ff6938844d7712f" prot="public" virt="virtual"><scope>littlebot_base::LittlebotCommunication</scope><name>~LittlebotCommunicationInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
