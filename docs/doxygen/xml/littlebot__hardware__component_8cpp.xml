<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="littlebot__hardware__component_8cpp" kind="file" language="C++">
    <compoundname>littlebot_hardware_component.cpp</compoundname>
    <includes local="no">hardware_interface/lexical_casts.hpp</includes>
    <includes local="no">hardware_interface/types/hardware_interface_type_values.hpp</includes>
    <includes local="no">rclcpp/rclcpp.hpp</includes>
    <includes refid="littlebot__hardware__component_8hpp" local="yes">littlebot_base/littlebot_hardware_component.hpp</includes>
    <includes local="yes">pluginlib/class_list_macros.hpp</includes>
    <incdepgraph>
      <node id="5">
        <label>littlebot_base/littlebot_hardware_component.hpp</label>
        <link refid="littlebot__hardware__component_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/nestor/littlebot_ws/src/littlebot/littlebot_base/src/littlebot_hardware_component.cpp</label>
        <link refid="littlebot__hardware__component_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>hardware_interface/handle.hpp</label>
      </node>
      <node id="12">
        <label>hardware_interface/hardware_info.hpp</label>
      </node>
      <node id="2">
        <label>hardware_interface/lexical_casts.hpp</label>
      </node>
      <node id="13">
        <label>hardware_interface/system_interface.hpp</label>
      </node>
      <node id="14">
        <label>hardware_interface/types/hardware_interface_return_values.hpp</label>
      </node>
      <node id="3">
        <label>hardware_interface/types/hardware_interface_type_values.hpp</label>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
      <node id="16">
        <label>pluginlib/class_list_macros.hpp</label>
      </node>
      <node id="4">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="15">
        <label>rclcpp_lifecycle/state.hpp</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="8">
        <label>unordered_map</label>
      </node>
      <node id="9">
        <label>utility</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacelittlebot__base">littlebot_base</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/>@<sp/>Copyright<sp/>2023<sp/>Nestor<sp/>Neto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hardware_interface/lexical_casts.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hardware_interface/types/hardware_interface_type_values.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rclcpp/rclcpp.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="littlebot__hardware__component_8hpp" kindref="compound">littlebot_base/littlebot_hardware_component.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelittlebot__base" kindref="compound">littlebot_base</ref></highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="classlittlebot__base_1_1LittlebotHardwareComponent_1ae5a69999a848159feacc1d7d63c41f42" refkind="member"><highlight class="normal">hardware_interface::CallbackReturn<sp/><ref refid="classlittlebot__base_1_1LittlebotHardwareComponent_1ae5a69999a848159feacc1d7d63c41f42" kindref="member">LittlebotHardwareComponent::on_init</ref>(</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hardware_interface::HardwareInfo<sp/>&amp;<sp/>info)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hardware_interface::SystemInterface::on_init(info)<sp/>!=</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>hardware_interface::CallbackReturn::SUCCESS)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hardware_interface::CallbackReturn::FAILURE;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>hw_positions_.resize(info_.joints.size(),<sp/>std::numeric_limits&lt;double&gt;::quiet_NaN());</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>hw_velocities_.resize(info_.joints.size(),<sp/>std::numeric_limits&lt;double&gt;::quiet_NaN());</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>hw_commands_.resize(info_.joints.size(),<sp/>std::numeric_limits&lt;double&gt;::quiet_NaN());</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hardware_interface::ComponentInfo<sp/>&amp;<sp/>joint<sp/>:<sp/>info_.joints)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(joint.command_interfaces.size()<sp/>!=<sp/>kNumCommandInterface_)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCLCPP_FATAL(</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rclcpp::get_logger(</highlight><highlight class="stringliteral">&quot;LittlebotSystemHardware&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Joint<sp/>&apos;%s&apos;<sp/>has<sp/>%zu<sp/>command<sp/>interfaces<sp/>found.<sp/>1<sp/>expected.&quot;</highlight><highlight class="normal">,<sp/>joint.name.c_str(),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint.command_interfaces.size());</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hardware_interface::CallbackReturn::ERROR;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(joint.command_interfaces[0].name<sp/>!=<sp/>hardware_interface::HW_IF_VELOCITY)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCLCPP_FATAL(</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rclcpp::get_logger(</highlight><highlight class="stringliteral">&quot;LittlebotSystemHardware&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Joint<sp/>&apos;%s&apos;<sp/>have<sp/>%s<sp/>command<sp/>interfaces<sp/>found.<sp/>&apos;%s&apos;<sp/>expected.&quot;</highlight><highlight class="normal">,<sp/>joint.name.c_str(),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint.command_interfaces[0].name.c_str(),<sp/>hardware_interface::HW_IF_VELOCITY);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hardware_interface::CallbackReturn::ERROR;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(joint.state_interfaces.size()<sp/>!=<sp/>kNumStateInterface_)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCLCPP_FATAL(</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rclcpp::get_logger(</highlight><highlight class="stringliteral">&quot;LittlebotSystemHardware&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Joint<sp/>&apos;%s&apos;<sp/>has<sp/>%zu<sp/>state<sp/>interface.<sp/>2<sp/>expected.&quot;</highlight><highlight class="normal">,<sp/>joint.name.c_str(),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint.state_interfaces.size());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hardware_interface::CallbackReturn::ERROR;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(joint.state_interfaces[0].name<sp/>!=<sp/>hardware_interface::HW_IF_POSITION)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCLCPP_FATAL(</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rclcpp::get_logger(</highlight><highlight class="stringliteral">&quot;LittlebotSystemHardware&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Joint<sp/>&apos;%s&apos;<sp/>have<sp/>%s<sp/>state<sp/>interfaces<sp/>found.<sp/>&apos;%s&apos;<sp/>expected.&quot;</highlight><highlight class="normal">,<sp/>joint.name.c_str(),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint.state_interfaces[0].name.c_str(),<sp/>hardware_interface::HW_IF_POSITION);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hardware_interface::CallbackReturn::ERROR;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(joint.state_interfaces[1].name<sp/>!=<sp/>hardware_interface::HW_IF_VELOCITY)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCLCPP_FATAL(</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rclcpp::get_logger(</highlight><highlight class="stringliteral">&quot;LittlebotSystemHardware&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Joint<sp/>&apos;%s&apos;<sp/>have<sp/>%s<sp/>state<sp/>interfaces<sp/>found.<sp/>&apos;%s&apos;<sp/>expected.&quot;</highlight><highlight class="normal">,<sp/>joint.name.c_str(),</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joint.state_interfaces[1].name.c_str(),<sp/>hardware_interface::HW_IF_VELOCITY);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hardware_interface::CallbackReturn::ERROR;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hardware_interface::CallbackReturn::SUCCESS;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classlittlebot__base_1_1LittlebotHardwareComponent_1a84b0c80c82c2f5eaf9b9c596393f33bb" refkind="member"><highlight class="normal">hardware_interface::CallbackReturn<sp/><ref refid="classlittlebot__base_1_1LittlebotHardwareComponent_1a84b0c80c82c2f5eaf9b9c596393f33bb" kindref="member">LittlebotHardwareComponent::on_activate</ref>(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rclcpp_lifecycle::State<sp/>&amp;<sp/></highlight><highlight class="comment">/*previous_state*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0u;<sp/>i<sp/>&lt;<sp/>hw_positions_.size();<sp/>i++)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isnan(hw_positions_[i]))</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hw_positions_[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hw_velocities_[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hw_commands_[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(rclcpp::get_logger(</highlight><highlight class="stringliteral">&quot;LittlebotSystemHardware&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Successfully<sp/>activated!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hardware_interface::CallbackReturn::SUCCESS;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="classlittlebot__base_1_1LittlebotHardwareComponent_1ab448e374330f42845dcd917f24aa0a92" refkind="member"><highlight class="normal">hardware_interface::CallbackReturn<sp/><ref refid="classlittlebot__base_1_1LittlebotHardwareComponent_1ab448e374330f42845dcd917f24aa0a92" kindref="member">LittlebotHardwareComponent::on_deactivate</ref>(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>[[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rclcpp_lifecycle::State<sp/>&amp;<sp/>state)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(rclcpp::get_logger(</highlight><highlight class="stringliteral">&quot;LittlebotSystemHardware&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Successfully<sp/>deactivated!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hardware_interface::CallbackReturn::SUCCESS;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="classlittlebot__base_1_1LittlebotHardwareComponent_1ae34070a99bf5ca7e0c716cbf78b1d121" refkind="member"><highlight class="normal">std::vector&lt;hardware_interface::StateInterface&gt;<sp/><ref refid="classlittlebot__base_1_1LittlebotHardwareComponent_1ae34070a99bf5ca7e0c716cbf78b1d121" kindref="member">LittlebotHardwareComponent::export_state_interfaces</ref>()</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>std::vector&lt;hardware_interface::StateInterface&gt;<sp/>state_interfaces;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0u;<sp/>i<sp/>&lt;<sp/>info_.joints.size();<sp/>i++)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>state_interfaces.emplace_back(hardware_interface::StateInterface(</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info_.joints[i].name,<sp/>hardware_interface::HW_IF_POSITION,<sp/>&amp;hw_positions_[i]));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>state_interfaces.emplace_back(hardware_interface::StateInterface(</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info_.joints[i].name,<sp/>hardware_interface::HW_IF_VELOCITY,<sp/>&amp;hw_velocities_[i]));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state_interfaces;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="classlittlebot__base_1_1LittlebotHardwareComponent_1a6cc242abaebaabf647f8ca6e4e4a2d5f" refkind="member"><highlight class="normal">std::vector&lt;hardware_interface::CommandInterface&gt;<sp/><ref refid="classlittlebot__base_1_1LittlebotHardwareComponent_1a6cc242abaebaabf647f8ca6e4e4a2d5f" kindref="member">LittlebotHardwareComponent::export_command_interfaces</ref>()</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>std::vector&lt;hardware_interface::CommandInterface&gt;<sp/>command_interfaces;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0u;<sp/>i<sp/>&lt;<sp/>info_.joints.size();<sp/>i++)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>command_interfaces.emplace_back(hardware_interface::CommandInterface(</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info_.joints[i].name,<sp/>hardware_interface::HW_IF_VELOCITY,<sp/>&amp;hw_commands_[i]));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>command_interfaces;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="classlittlebot__base_1_1LittlebotHardwareComponent_1aaa2acd019e87d3dc9ee113961e89c465" refkind="member"><highlight class="normal">hardware_interface::return_type<sp/><ref refid="classlittlebot__base_1_1LittlebotHardwareComponent_1aaa2acd019e87d3dc9ee113961e89c465" kindref="member">LittlebotHardwareComponent::read</ref>(</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>[[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rclcpp::Time<sp/>&amp;<sp/>time,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>[[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rclcpp::Duration<sp/>&amp;<sp/>period)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hardware_interface::return_type::OK;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="classlittlebot__base_1_1LittlebotHardwareComponent_1a2f6bda00829edbbeded56906a7519828" refkind="member"><highlight class="normal">hardware_interface::return_type<sp/><ref refid="classlittlebot__base_1_1LittlebotHardwareComponent_1a2f6bda00829edbbeded56906a7519828" kindref="member">LittlebotHardwareComponent::write</ref>(</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>[[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rclcpp::Time<sp/>&amp;<sp/>time,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>[[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rclcpp::Duration<sp/>&amp;<sp/>period)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hardware_interface::return_type::OK;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">}<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>namespace<sp/>littlebot_base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pluginlib/class_list_macros.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">PLUGINLIB_EXPORT_CLASS(</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><ref refid="classlittlebot__base_1_1LittlebotHardwareComponent" kindref="compound">littlebot_base::LittlebotHardwareComponent</ref>,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>hardware_interface::SystemInterface)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/nestor/littlebot_ws/src/littlebot/littlebot_base/src/littlebot_hardware_component.cpp"/>
  </compounddef>
</doxygen>
